import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {

    compileSdkVersion 22
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.putao.ptx.wirelesstransfer"/*be.ppareit.swiftp*/
        minSdkVersion 21
        targetSdkVersion 22
        versionCode 7/*21200*/
        versionName "0.0.7"/*"2.12.0"*/

        buildConfigField 'String', 'FLAVOR_DEV', "\"dev\""
        buildConfigField 'String', 'FLAVOR_INNERTEST', "\"innerTest\""
        buildConfigField 'String', 'FLAVOR_ONLINE', "\"online\""
    }
//    productFlavors {
//        playstore_paid {
//            applicationId "be.ppareit.swiftp"
//        }
//        playstore_demo {
//            applicationId "be.ppareit.swiftp_free"
//        }
//        fdroid_free {
//            applicationId "be.ppareit.swiftp_free"
//        }
//    }

    signingConfigs {
        config {
            storeFile file("com.putao.sign.jks")
            storePassword "123456"
            keyAlias "com.putao"
            keyPassword "putao123"
        }
        putao {
            storeFile file(System.getenv("HOME") + "/keystore/putao.keystore")
            storePassword "putao123"
            keyAlias "ptx"
            keyPassword "putao123"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.putao
            zipAlignEnabled true
            minifyEnabled /*true*/ false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.config
            minifyEnabled false
        }
    }

    productFlavors {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss")
        def date = "." + defaultConfig.versionCode + "_".concat(sdf.format(System.currentTimeMillis()))
        dev {
            // versionName defaultConfig.versionName + '-dev'
            versionName defaultConfig.versionName + date
        }
        println("java branch———————————> " + System.getenv()['IS_PATCH'])
        if (!"TRUE".equals(System.getenv()['IS_PATCH'])) {
            innerTest {
                versionName = defaultConfig.versionName + '-test'
            }

            online {
                //versionName = defaultConfig.versionName + '-online'
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    task copyApks(type: Copy, dependsOn: build) {
        delete "${rootProject.buildDir}/v${defaultConfig.versionName}/"
        from "${project.buildDir}/outputs/apk/"
        include {
            apk -> apk.file.name.contains('release') && !apk.file.name.contains('unaligned')
        }
        into "${rootProject.buildDir}/v${defaultConfig.versionName}/"
    }

    applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    def outputFile = output.outputFile
                    if ("release".equals(variant.buildType.name) && outputFile != null && outputFile.name.endsWith('.apk')) {
                        if ('dev'.equals(variant.flavorName)
                                || 'innerTest'.equals(variant.flavorName)
                                || 'online'.equals(variant.flavorName)) {
                            def newName = /*rootProject.name*/ 'PTWirelessTransfer'.concat('-').concat(variant.productFlavors[0].name).concat('-').concat(variant.buildType.name).concat('.apk')
                            output.outputFile = new File(output.outputFile.parent, newName)
                        }
                    }
            }
    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    // Needed for retrolambda
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding "UTF-8"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'net.vrallev.android:cat:1.0.2'
    compile 'com.android.support:appcompat-v7:22.2.1'
    provided 'org.projectlombok:lombok:1.16.6'
    compile 'com.jakewharton:butterknife:7.0.1'
    //compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.1.5
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.1'
    }
}

// Required because retrolambda is on maven central
repositories {
    mavenCentral()
}

apply plugin: 'com.android.application' //or apply plugin: 'java'
apply plugin: 'me.tatarka.retrolambda'

android {
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}
